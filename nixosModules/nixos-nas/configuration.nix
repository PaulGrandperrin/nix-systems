{ config, pkgs, lib, inputs, ... }: {
  imports = [
    ./hardware-configuration.nix
    ../shared/common.nix
    ../shared/nspawns.nix
    ../shared/net.nix
    ../shared/web.nix
    ../shared/auto-upgrade.nix
    ../shared/wireguard.nix
    ../shared/wg-mounts.nix
    ../shared/headless.nix
    ../shared/observability.nix
    ../shared/mastodon.nix
    ../shared/hostapd.nix
    ../shared/yuzu.nix
  ];

  home-manager.users = let 
    homeModule = {
      imports = [
        ../../homeModules/shared/core.nix
        ../../homeModules/shared/cmdline-extra.nix
      ];
    };
  in {
    root  = homeModule;
    paulg = homeModule;
  };

  fileSystems."/" = {
    device = "flash/nixos";
    fsType = "zfs";
    options = [
      "noatime"
      "nodiratime"
    ];
  };

  fileSystems."/nix" = {
    device = "flash/nixstore";
    fsType = "zfs";
    options = [
      "noatime"
      "nodiratime"
    ];
  };

  fileSystems."/home" = {
    device = "flash/home";
    fsType = "zfs";
    options = [
      "noatime"
      "nodiratime"
    ];
  };

  fileSystems."/boot" = {
    device = "/dev/disk/by-uuid/641A-604D";
    fsType = "vfat";
    options = [
      "noatime"
      "nodiratime"
    ];
  };

  swapDevices =
    [ { device = "/dev/disk/by-uuid/dc8118ad-555c-48dc-96f7-3ce11823b49f"; }
    ];

  
  networking.hostId="51079489";
  networking.hostName = "nixos-nas";
  services.net = {
    enable = true;
    mainInt = "enp3s0";
  }; 

  #boot.extraModulePackages = [(
  #  pkgs.kernel-module-ath-patched.overrideAttrs (old: {
  #    kernel = config.boot.kernelPackages.kernel;
  #  })
  #)];

  services.my-wg = {
    enable = true;
  };

  services.my-nspawn = {
    enable = true;
    name = "tidb-nas";
    net-id = 1;
    id = 1;
  };

  # web
  sops.secrets."web-nas.paulg.fr" = {
    sopsFile = ../../secrets/nixos-nas.yaml;
    mode = "0440";
    owner = "nginx";
    group = "nginx";
    restartUnits = [ "nginx.service" ];
  };
  services.nginx = {
    #package = pkgs.nginxQuic;
    additionalModules = [ pkgs.nginxModules.fancyindex ];
    virtualHosts."nas.paulg.fr" = {
      enableACME = true;
      forceSSL = true;
      #quic = true;
      default = true;
      root = "/export/public/movies";
      locations."/" = {
        basicAuthFile = config.sops.secrets."web-nas.paulg.fr".path;
        extraConfig = ''
          #autoindex on;
          fancyindex on;              # Enable fancy indexes.
          fancyindex_exact_size off;  # Output human-readable file sizes.
        '';
      };
    };
  };


  powerManagement.cpuFreqGovernor = "schedutil";
  boot.kernelModules = ["coretemp" "it87"]; # detected by sensors-detect
  hardware.fancontrol = {
    enable = true;
    config = ''
      # generated by pwmconfig
      INTERVAL=2
      DEVPATH=hwmon0=devices/platform/coretemp.0 hwmon1=devices/platform/it87.656
      DEVNAME=hwmon0=coretemp hwmon1=it8771
      FCTEMPS=hwmon1/pwm1=hwmon0/temp1_input  hwmon1/pwm2=hwmon1/temp2_input
      FCFANS=hwmon1/pwm1=hwmon1/fan1_input  hwmon1/pwm2=hwmon1/fan2_input
      MINTEMP=hwmon1/pwm1=30  hwmon1/pwm2=20
      MAXTEMP=hwmon1/pwm1=50  hwmon1/pwm2=30
      MINSTART=hwmon1/pwm1=150  hwmon1/pwm2=90
      MINSTOP=hwmon1/pwm1=0  hwmon1/pwm2=60
      MINPWM=hwmon1/pwm2=0
    '';
  };

  fileSystems = {
    "/IronWolf12TB" = {
      device = "IronWolf12TB";
      fsType = "zfs";
    };
    "/IronWolf12TB/clear" = {
      device = "IronWolf12TB/clear";
      fsType = "zfs";
    };
    "/export" = { # for security, make /export its own filesystem instead of just being a directory of / 
      device = "none";
      fsType = "tmpfs";
      options = [ "mode=755" ];
    };
    "/export/public" = {
      device = "/IronWolf12TB/clear";
      options = [ "bind" ];
    };
    "/export/encrypted" = {
      device = "/IronWolf12TB/encrypted";
      options = [ "bind" ];
    };
  };

  sops.secrets."cache-nas.paulg.fr-privkey.pem" = {
    sopsFile = ../../secrets/nixos-nas.yaml;
    restartUnits = [ "nix-serve.service" ];
  };
  services.nix-serve = {
    enable = true;
    secretKeyFile = config.sops.secrets."cache-nas.paulg.fr-privkey.pem".path;
    openFirewall = false;
  };

  sops.secrets."deluge-auth" = {
    sopsFile = ../../secrets/nixos-nas.yaml;
    owner = "nobody";
    restartUnits = [ "deluged.service" "delugeweb.service" ];
  };
  services.deluge = {
    enable = true;
    declarative = true;
    authFile = config.sops.secrets."deluge-auth".path;
    config = {
      download_location = "/export/public/torrent";
      allow_remote = true;
      daemon_port = 58846;
      listen_ports = [6881 6891];
      pre_allocate_storage = true;
      prioritize_first_last_pieces = true;
      sequential_download = true;
      stop_seed_at_ratio = true;
      stop_seed_ratio = 1.0;
      share_ratio_limit = 1.0;
      
    };
    openFirewall = true;
    user = "nobody";
    group = "nogroup";
    web = {
      enable = true;
      openFirewall = true;
      port = 8112;
    };
  };

  environment.etc."systemd/dnssd/10-nfs.dnssd".text = ''
    [Service]
    Name=NFS share on %H
    Type=_nfs._tcp
    Port=2049
    TxtText=path=/export/public
  '';

  environment.etc."systemd/dnssd/10-smb.dnssd".text = ''
    [Service]
    Name=SMB share on %H
    Type=_smb._tcp
    Port=445
    TxtText=path=/public
  '';

  systemd.services.systemd-resolved.restartTriggers = # reload resolved when a dnssd file changes
    map (i: i.source) (builtins.attrValues (lib.filterAttrs (n: _: builtins.isList (builtins.match "systemd/dnssd/.+" n)) config.environment.etc));

  services.nfs.server = {
    enable = true;
    exports = let
      root_options      = "fsid=root,insecure,no_subtree_check,all_squash,ro";
      public_options    = "insecure,no_subtree_check,all_squash,no_wdelay,rw";
      encrypted_options = "insecure,no_subtree_check,all_squash,no_wdelay,rw,anonuid=${toString config.users.users.paulg.uid},anongid=${toString config.users.groups.${config.users.users.paulg.group}.gid}";
    in ''
      /export           10.42.0.0/24(${root_options})   192.168.1.0/24(${root_options})
      /export/public    10.42.0.0/24(${public_options}) 192.168.1.0/24(${public_options})
      /export/encrypted 10.42.0.4(${encrypted_options}) 10.42.0.5(${encrypted_options}) # nixos-nas and nixos-macbook
    '';

    # fixed rpc.statd port; for firewall
    lockdPort = 4101;
    mountdPort = 4102;
    statdPort = 4100;
  };

  networking.firewall.allowedTCPPorts = [ 
    5357 # wsdd 
    2049 # nfs v3 and v4
    111 4100 4101 4102 20048 # nfs v3
    5201
  ];
  networking.firewall.allowedUDPPorts = [
    3702 # wsdd
    2049 # nfs v3 and v4
    111 4100 4101 4102 20048 # nfs v3
  ];

  sops.secrets."yuzu-multiplayer" = {
    restartUnits = [ "yuzu-multiplayer.service" ];
  };

  services.yuzu = {
    enable = true;
    package = pkgs.my-yuzu;
    openFirewall = true;
    secretsFile = config.sops.secrets."yuzu-multiplayer".path;
    settings = {
      roomName = "A la Bonne Auberge de Grenoble";
      preferredGame = "SSX";
    };
  };

  services.samba-wsdd.enable = true; # make shares visible for windows 10 clients

  services.samba = {
    enable = true;
    openFirewall = true;
    nsswins = true; # name resolution
    securityType = "user";
    extraConfig = ''
      workgroup = WORKGROUP
      security = user 
      use sendfile = yes
      # note: localhost is the ipv6 localhost ::1
      hosts allow = 192.168. 10.42.0 127.0.0.1 localhost
      hosts deny = 0.0.0.0/0
      guest account = nobody
      map to guest = bad user
      #dfree command = 
    '';
    shares = {
      public = {
        path = "/export/public";
        browseable = "yes";
        #"read only" = "yes";
        writable = "yes";
        "guest ok" = "yes";
        public = "yes";
        "only guest" = "yes";
        #"create mask" = "0644";
        #"directory mask" = "0755";
        #"force user" = "username";
        #"force group" = "groupname";
        "vfs objects" = "recycle";
        #"recycle:repository" = ".recycle";
        "recycle:keeptree" = "yes";
        "recycle:versions" = "yes";
      };
    };
  };
}

